Creating updates of Docker MockServer Image

1 - Login in the ECR MockServer:

  Use the Export to select the AWS Credential of the account that you are using, in this case we will use the dev account.

      export AWS_PROFILE=dev && export AWS_REGION=eu-west-1

      aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 069931004485.dkr.ecr.eu-west-1.amazonaws.com


2 - Create the Image and Push to ECR

  Create a New Builder (if not already done):
  This step is only necessary if you haven't set up a builder before.

      docker buildx create --name new_builder --use

  Start up the Builder (if not already running):
      
      docker buildx inspect --bootstrap

  Build the Image usign the buildx to ensure that you'll use the architecture amd64 (compatible with the EKS Nodes Architecture)
  In the Folder of the Dockerfile run:
      
      docker buildx build --platform linux/amd64 --no-cache -t 069931004485.dkr.ecr.eu-west-1.amazonaws.com/mockserver:$[VERSION] --load .

  Push the Image to ECR:

      docker push 069931004485.dkr.ecr.eu-west-1.amazonaws.com/mockserver:$[VERSION]


3 - Access the Bastion Instance to update the Deployment.yaml

  In AWS Console select the instance (EKS-MockServer-Bastion), click in Actions and then Connect

  Select the option Session Manager and click in Connect Button

  In the Instance Terminal run the command:

      sudo nano mockserver-deployment.yaml

  In the spec Containers, change the image address for the new URI of the new Image Pushed and run the commands:

      "Ctrl + O" to save the changes and "Ctrl + X" to close the nano

  Run the command:

      kubectl apply -f mockserver-deployment.yaml

  You can follow the update with the commands:

      "kubectl get pods --watch" To follow the deploy and check in the pod is READY (1/1) and the pod STATUS is Running

      and

      "kubectl logs -f $[POD_NAME]" to check if the Server is ready or check some error


4 - In case of the Bastion is not connected in the EKS Cluster

  You can run:

      aws eks update-kubeconfig --name CLUSTER_NAME --region CLUSTER_REGION

  And after run:

      "kubectl get namespaces" to check the namespaces and confirm that mockserver exists

  After that run:

      "kubectl config set-context --current --namespace=mockserver" to select the namespace of mockserver for all kubectl commands


5 - To access the mockserver endpoint

  The mockserver endpoint can be accessed using the endpoint:

     mockserver.dev.pyypl.io:3000
